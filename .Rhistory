# Assign (in)significant genes
treatment_results$sig <- rep("insignificant", nrow(treatment_results))
treatment_results$sig[which(treatment_results$adj.P.Val<0.05)] <- "significant"
# volcano plot
ggplot(treatment_results, aes(x = logFC, y = -log10(adj.P.Val), color = sig)) +
geom_point() +
theme_bw() +
ggtitle("Volcano plot") +
xlab("LogFC")+
ylab("-Log10(q-value)") +
scale_color_manual(values = c("black", "red")) +
theme(legend.position = "none")
# Number of significant probes
treatment_results_sig <- treatment_results %>%
filter(sig == "significant")
nrow(treatment_results_sig)
# top differentially expressed probe 201468_s_at
most.sig.gene <- treatment_results_sig %>%
dplyr::select(adj.P.Val) %>%
slice(-c(2:25))
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
for (pkg in c("GEOquery", "oligo", "limma", "hgu133plus2.db", "pd.hg.u133.plus.2", "viridis")) {
if (!requireNamespace(pkg, quietly = TRUE)) {
BiocManager::install(pkg)
}
}
for (pkg in c("gplots")) {
if (!requireNamespace(pkg, quietly = TRUE)) {
install.packages(pkg)
}
}
if (!requireNamespace("fgsea", quietly = TRUE)) {
BiocManager::install("fgsea")
}
library(tidyverse)
library(dplyr)
library(BiocManager)
library(GEOquery)
library(oligo)
library(limma)
library(viridis)
library(gplots)
library(fgsea)
#practicum altered GEO code GSE27973
if (!file.exists("./GSE27973/GSE27973_RAW.tar"))
getGEOSuppFiles("GSE27973")
untar("./GSE27973/GSE27973_RAW.tar", exdir = "./GSE27973/data")
celFiles <- list.celfiles("./GSE27973/data", full.names = TRUE, listGzipped = TRUE)
raw.GEO <- read.celfiles(celFiles)
pData(raw.GEO)
#will have to change variable names based on what we are looking at
#for this problem the four levels of treatment we are looking at are medium alone, RV16 (rhinovirus) alone, a combination of RV16 and CSE (cigarette smoke extract), and CSE alone.
pData(raw.GEO)$treatment <- c(rep(c("medium.only", "RV16.only", "RV16.CSE", "CSE.only" ), 4))
pData(raw.GEO)
boxplot(raw.GEO, col = "orange", main = "Raw Treatment Probe Intensities")
#boxplot shows all medians hovering between 6-7.5ish with huge maximums (above 14)
GSE27973.rma <- rma(raw.GEO)
boxplot(GSE27973.rma, col = "purple", main = "RMA Expression Values")
#this boxplot looks pretty similar to the raw data one
#RUN CODE--SUCCESSFUL
design <- model.matrix(~ -1 +factor(GSE27973.rma$treatment))
colnames(design) <- levels(factor(GSE27973.rma$treatment))
#^ this code from class is a way to rename columns and save them
dea.fit <- lmFit(GSE27973.rma, design)
head(design)
#groups of interest are CSE and Medium
GSE27973.comp <- makeContrasts(treat.effect = CSE.only - medium.only, levels = design)
fit <- contrasts.fit(dea.fit, GSE27973.comp)
#adjust the fitted model with Bayes moderation SE
fit <- eBayes(fit)
#results
treatment_results <- topTable(fit, coef = "treat.effect", adjust = "BH", num = Inf)
head(treatment_results)
#all of the p-values are stat. sig.
# Add gene names
library(hgu133plus2.db)
treatment_results$ID = row.names(treatment_results)
treatment_results$SYMBOL <- sapply(treatment_results$ID, function(x) mget(x, env = hgu133plus2SYMBOL, ifnotfound=NA)[[1]])
head(treatment_results)
#saving differential data
write.table(treatment_results, "./GSE27973_DE_results.txt", row.names = F, col.names = T, quote = F, sep = "\t")
# sorting out the significant values
treatment_results$sig <- rep("insignificant", nrow(treatment_results))
treatment_results$sig[which(treatment_results$adj.P.Val<0.05)] <- "significant"
#volcano plot
ggplot(treatment_results, aes(x = logFC, y = -log10(adj.P.Val), color = sig)) +
geom_point() +
theme_bw() +
ggtitle("Volcano plot") +
xlab("LogFC")+
ylab("-Log10(q-value)") +
scale_color_manual(values = c("black", "red")) +
theme(legend.position = "none")
# Number of probes
sig.treatment_results <- treatment_results %>% filter(sig == "significant")
nrow(sig.treatment_results)
# top differentially expressed probe 201468_s_at
most.sig.gene <- sig.treatment_results %>%
dplyr::select(adj.P.Val) %>%
slice(-c(2:25))
most.sig.gene <- sig.treatment_results %>%
dplyr::select(adj.P.Val)
View(most.sig.gene)
?slice
library(dplyr)
# top differentially expressed probe 201468_s_at
most.sig.gene <- sig.treatment_results %>%
dplyr::select(adj.P.Val) %>%
slice(-c(2:25))
# top differentially expressed probe 201468_s_at
most.sig.gene <- sig.treatment_results %>%
dplyr::select(adj.P.Val) %>%
slice(-c(2:25))
most.sig.gene <- sig.treatment_results %>%
dplyr::select(adj.P.Val) %>%
slice(-c(2:25))
most.sig.gene <- treatment_results_sig %>%
dplyr::select(adj.P.Val) %>%
slice(-c(2:25))
library(GEOquery)
library(oligo) # get info about microarray
library(limma) # library that has linear models needed to analyze gene expression
library(viridis) # color palette
library(ggplot2)
library(dplyr)
if (!file.exists("./GSE27973/GSE27973_RAW.tar"))
getGEOSuppFiles("GSE27973")
untar("./GSE27973/GSE27973_RAW.tar", exdir = "./GSE27973/data")
celFiles <- list.celfiles("./GSE27973/data", full.names = TRUE, listGzipped = TRUE)
raw.data <- read.celfiles(celFiles) # raw data
pData(raw.data)
pData(raw.data)$treatment <- c(rep("medium"), rep("RV16"), rep("CSE"), rep("RV16+CSE")) # define
pData(raw.data)
boxplot(raw.data, col = "red", main = "Raw Probe Intensities") # this is raw data, you need to normalize the data, absolute/raw values mean nothing you have to compare it to something.
# There does not appear to be any outliers
GSE27973.rma <- rma(raw.data) # rma normalizes and rescales the data
boxplot(GSE27973.rma, col = "blue", main = "RMA Expression Values") # normalized data in boxplot form; everything is on the same scale now
most.sig.gene <- treatment_results_sig %>%
dplyr::select(adj.P.Val) %>%
slice(-c(2:25))
most.sig.gene <- treatment_results_sig %>%
dplyr::select(adj.P.Val) %>%
slice(-c(2:25))
library(ggplot2)
most.sig.gene <- sig.treatment_results %>%
dplyr::select(adj.P.Val) %>%
slice(-c(2:25))
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
for (pkg in c("GEOquery", "oligo", "limma", "hgu133plus2.db", "pd.hg.u133.plus.2", "viridis")) {
if (!requireNamespace(pkg, quietly = TRUE)) {
BiocManager::install(pkg)
}
}
for (pkg in c("gplots")) {
if (!requireNamespace(pkg, quietly = TRUE)) {
install.packages(pkg)
}
}
if (!requireNamespace("fgsea", quietly = TRUE)) {
BiocManager::install("fgsea")
}
library(tidyverse)
library(dplyr)
library(BiocManager)
library(GEOquery)
library(oligo)
library(limma)
library(viridis)
library(gplots)
library(fgsea)
library(ggplot2)
#practicum altered GEO code GSE27973
if (!file.exists("./GSE27973/GSE27973_RAW.tar"))
getGEOSuppFiles("GSE27973")
untar("./GSE27973/GSE27973_RAW.tar", exdir = "./GSE27973/data")
celFiles <- list.celfiles("./GSE27973/data", full.names = TRUE, listGzipped = TRUE)
raw.GEO <- read.celfiles(celFiles)
pData(raw.GEO)
#will have to change variable names based on what we are looking at
#for this problem the four levels of treatment we are looking at are medium alone, RV16 (rhinovirus) alone, a combination of RV16 and CSE (cigarette smoke extract), and CSE alone.
pData(raw.GEO)$treatment <- c(rep(c("medium.only", "RV16.only", "RV16.CSE", "CSE.only" ), 4))
pData(raw.GEO)
boxplot(raw.GEO, col = "orange", main = "Raw Treatment Probe Intensities")
#boxplot shows all medians hovering between 6-7.5ish with huge maximums (above 14)
GSE27973.rma <- rma(raw.GEO)
boxplot(GSE27973.rma, col = "purple", main = "RMA Expression Values")
#this boxplot looks pretty similar to the raw data one
#RUN CODE--SUCCESSFUL
design <- model.matrix(~ -1 +factor(GSE27973.rma$treatment))
colnames(design) <- levels(factor(GSE27973.rma$treatment))
#^ this code from class is a way to rename columns and save them
dea.fit <- lmFit(GSE27973.rma, design)
head(design)
#groups of interest are CSE and Medium
GSE27973.comp <- makeContrasts(treat.effect = CSE.only - medium.only, levels = design)
fit <- contrasts.fit(dea.fit, GSE27973.comp)
#adjust the fitted model with Bayes moderation SE
fit <- eBayes(fit)
#results
treatment_results <- topTable(fit, coef = "treat.effect", adjust = "BH", num = Inf)
head(treatment_results)
#all of the p-values are stat. sig.
# Add gene names
library(hgu133plus2.db)
treatment_results$ID = row.names(treatment_results)
treatment_results$SYMBOL <- sapply(treatment_results$ID, function(x) mget(x, env = hgu133plus2SYMBOL, ifnotfound=NA)[[1]])
head(treatment_results)
#saving differential data
write.table(treatment_results, "./GSE27973_DE_results.txt", row.names = F, col.names = T, quote = F, sep = "\t")
# sorting out the significant values
treatment_results$sig <- rep("insignificant", nrow(treatment_results))
treatment_results$sig[which(treatment_results$adj.P.Val<0.05)] <- "significant"
#volcano plot
ggplot(treatment_results, aes(x = logFC, y = -log10(adj.P.Val), color = sig)) +
geom_point() +
theme_bw() +
ggtitle("Volcano plot") +
xlab("LogFC")+
ylab("-Log10(q-value)") +
scale_color_manual(values = c("black", "red")) +
theme(legend.position = "none")
# Number of probes
sig.treatment_results <- treatment_results %>% filter(sig == "significant")
nrow(sig.treatment_results)
# top differentially expressed probe 201468_s_at
most.sig.gene <- sig.treatment_results %>%
dplyr::select(adj.P.Val) %>%
slice(-c(2:25))
most.sig.gene <- sig.treatment_results %>%
dplyr::select(adj.P.Val) %>%
dplyr::slice(-c(2:25))
# top differentially expressed probe 201468_s_at
most.sig.gene <- sig.treatment_results %>%
dplyr::select(adj.P.Val) %>%
dplyr::slice(-c(2:25))
df.boxplot <- data.frame(
expression = exprs(GSE27973.rma)["201468_s_at", ],
treat.effect = GSE27973.rma$treatment)
library(ggplot2)
ggplot(df.boxplot, aes(x = treat.effect, y = expression)) +
geom_boxplot(outlier.colour = NA, fill = "lightgreen") +
stat_boxplot(geom = "errorbar") +
geom_jitter(size = 1, position = position_jitter(width = 0.3)) +
ggtitle("Expression Values for NQO1") +
xlab(" ") +
ylab("RMA Intensity") +
theme_bw() +
theme(legend.position = "none")
# How many probes corresponding to this gene (NQO1) are among the top hits?
NQO1 <- treatment_results[which(treatment_results$SYMBOL=="NQO1"),]
print(NQO1)
#RUN CODE
top_results <- treatment_results[1:200, ]
top.eset <- GSE27973.rma[row.names(exprs(GSE27973.rma)) %in% row.names(top_results)]
status.colors <- unlist(lapply(GSE27973.rma$treatment,
function(x) {if (x == "medium.only") "red"
else if (x == "RV16.only") "navy"
else if (x == "RV16.CSE") "blue"
else if (x == "CSE.only") "purple"}))
heatmap.2(exprs(top.eset), col = viridis(256, option = "B"),
trace = "none", keysize = 1.5, key.title = NA,
ColSideColors = status.colors)
legend("bottomleft", legend = c("medium.only", "RV16.only", "CSE.only", "RV16+CSE"), fill = c("red", "navy", "purple", "blue"))
mean_distance(newnetwork, directed=T)
setwd("~/Desktop/School/Spring2022/BDS516/Week 13 4:14:22")
library(readr)
edge_data <- read_csv("edge_data.csv")
library(readr)
library(tidyverse)
library(igraph)
newnetwork <- graph_from_data_frame(d = edgelist,
vertices = nodelist,
directed = TRUE)
edgelist <- edge_data %>% select(Out_tie, In_tie, tie_type)
nodelist <- edge_data %>% select(Out_tie, introvert) %>% distinct()
plot(newnetwork,
edge.arrow.size = 0.1,
vertex.size = 3,
vertex.label = NA)
V(newnetwork)$color <- V(newnetwork)$introvert
plot(newnetwork,
edge.arrow.size = 0.1,
vertex.size = 3,
vertex.label = NA)
edgelist1 <- edgelist %>% filter(tie_type == 3)
newnetwork1 <- graph_from_data_frame(d = edgelist1,
vertices = nodelist,
directed = TRUE)
plot(newnetwork1,
edge.arrow.size = 0.1,
vertex.size = 3,
vertex.label = NA)
# Let's do some descriptive stats
edge_density(newnetwork, loops=F)
# We can confirm that directly
ecount(newnetwork)/(vcount(newnetwork)*(vcount(newnetwork)-1))
reciprocity(newnetwork)
transitivity(newnetwork, type="global")
diameter(newnetwork, directed=F, weights=NA)
deg <- degree(newnetwork, mode="all")
mean(deg)
plot(newnetwork, vertex.size=deg/10, edge.arrow.size = 0.1)
hist(deg, breaks = 20, main="Histogram of node degree")
deg.dist <- degree_distribution(newnetwork, cumulative=T, mode="all")
plot( x=0:max(deg), y=1-deg.dist, pch=19, cex=1.2, col="orange", xlab="Degree", ylab="Cumulative Frequency")
degree(newnetwork, mode="in")
centr_degree(newnetwork, mode="in", normalized=T)
closeness(newnetwork, mode="all", weights=NA)
betweenness(newnetwork, directed=T, weights=NA)
mean_distance(newnetwork, directed=T)
distances(newnetwork, weights=NA)
ceb <- cluster_edge_betweenness(newnetwork)
dendPlot(ceb, mode="hclust")
plot(ceb, newnetwork, vertex.size = 3, edge.arrow.size = 0.2)
clp <- cluster_label_prop(newnetwork)
plot(clp, newnetwork, newnetwork, vertex.size = 3, edge.arrow.size = 0.2)
betweenness(newnetwork, directed=T, weights=NA)
plot(newnetwork,
edge.arrow.size = 0.1,
vertex.size = 3,
vertex.label = NA)
newnetwork <- graph_from_data_frame(d = edgelist,
vertices = nodelist,
directed = TRUE)
plot(newnetwork,
edge.arrow.size = 0.1,
vertex.size = 3,
vertex.label = NA)
V(newnetwork)$color <- V(newnetwork)$introvert
plot(newnetwork,
edge.arrow.size = 0.1,
vertex.size = 3,
vertex.label = NA)
edgelist1 <- edgelist %>% filter(tie_type == 3)
newnetwork1 <- graph_from_data_frame(d = edgelist1,
vertices = nodelist,
directed = TRUE)
plot(newnetwork1,
edge.arrow.size = 0.1,
vertex.size = 3,
vertex.label = NA)
# Let's do some descriptive stats
edge_density(newnetwork, loops=F)
library(readr)
library(tidyverse)
edge_data <- read_csv("edge_data.csv")
edgelist <- edge_data %>% select(Out_tie, In_tie, tie_type)
nodelist <- edge_data %>% select(Out_tie, introvert) %>% distinct()
library(igraph)
newnetwork <- graph_from_data_frame(d = edgelist,
vertices = nodelist,
directed = TRUE)
plot(newnetwork,
edge.arrow.size = 0.1,
vertex.size = 3,
vertex.label = NA)
V(newnetwork)$color <- V(newnetwork)$introvert
plot(newnetwork,
edge.arrow.size = 0.1,
vertex.size = 3,
vertex.label = NA)
edgelist1 <- edgelist %>% filter(tie_type == 3)
newnetwork1 <- graph_from_data_frame(d = edgelist1,
vertices = nodelist,
directed = TRUE)
plot(newnetwork1,
edge.arrow.size = 0.1,
vertex.size = 3,
vertex.label = NA)
# Let's do some descriptive stats
edge_density(newnetwork, loops=F)
# We can confirm that directly
ecount(newnetwork)/(vcount(newnetwork)*(vcount(newnetwork)-1))
reciprocity(newnetwork)
transitivity(newnetwork, type="global")
diameter(newnetwork, directed=F, weights=NA)
deg <- degree(newnetwork, mode="all")
mean(deg)
plot(newnetwork, vertex.size=deg/10, edge.arrow.size = 0.1)
hist(deg, breaks = 20, main="Histogram of node degree")
deg.dist <- degree_distribution(newnetwork, cumulative=T, mode="all")
plot( x=0:max(deg), y=1-deg.dist, pch=19, cex=1.2, col="orange", xlab="Degree", ylab="Cumulative Frequency")
degree(newnetwork, mode="in")
centr_degree(newnetwork, mode="in", normalized=T)
closeness(newnetwork, mode="all", weights=NA)
betweenness(newnetwork, directed=T, weights=NA)
mean_distance(newnetwork, directed=T)
distances(newnetwork, weights=NA)
ceb <- cluster_edge_betweenness(newnetwork)
dendPlot(ceb, mode="hclust")
plot(ceb, newnetwork, vertex.size = 3, edge.arrow.size = 0.2)
clp <- cluster_label_prop(newnetwork)
plot(clp, newnetwork, newnetwork, vertex.size = 3, edge.arrow.size = 0.2)
plot(newnetwork,
edge.arrow.size = 0.1,
vertex.size = 3,
vertex.label = NA)
library(readr)
library(tidyverse)
edge_data <- read_csv("edge_data.csv")
edgelist <- edge_data %>% select(Out_tie, In_tie, tie_type)
nodelist <- edge_data %>% select(Out_tie, introvert) %>% distinct()
library(igraph)
newnetwork <- graph_from_data_frame(d = edgelist,
vertices = nodelist,
directed = TRUE)
plot(newnetwork,
edge.arrow.size = 0.1,
vertex.size = 3,
vertex.label = NA)
V(newnetwork)$color <- V(newnetwork)$introvert
plot(newnetwork,
edge.arrow.size = 0.1,
vertex.size = 3,
vertex.label = NA)
edgelist1 <- edgelist %>% filter(tie_type == 3)
newnetwork1 <- graph_from_data_frame(d = edgelist1,
vertices = nodelist,
directed = TRUE)
plot(newnetwork1,
edge.arrow.size = 0.1,
vertex.size = 3,
vertex.label = NA)
# Let's do some descriptive stats
edge_density(newnetwork, loops=F)
# We can confirm that directly
ecount(newnetwork)/(vcount(newnetwork)*(vcount(newnetwork)-1))
reciprocity(newnetwork)
transitivity(newnetwork, type="global")
diameter(newnetwork, directed=F, weights=NA)
deg <- degree(newnetwork, mode="all")
mean(deg)
plot(newnetwork, vertex.size=deg/10, edge.arrow.size = 0.1)
hist(deg, breaks = 20, main="Histogram of node degree")
deg.dist <- degree_distribution(newnetwork, cumulative=T, mode="all")
plot( x=0:max(deg), y=1-deg.dist, pch=19, cex=1.2, col="orange", xlab="Degree", ylab="Cumulative Frequency")
degree(newnetwork, mode="in")
centr_degree(newnetwork, mode="in", normalized=T)
closeness(newnetwork, mode="all", weights=NA)
betweenness(newnetwork, directed=T, weights=NA)
mean_distance(newnetwork, directed=T)
distances(newnetwork, weights=NA)
ceb <- cluster_edge_betweenness(newnetwork)
dendPlot(ceb, mode="hclust")
plot(ceb, newnetwork, vertex.size = 3, edge.arrow.size = 0.2)
clp <- cluster_label_prop(newnetwork)
plot(clp, newnetwork, newnetwork, vertex.size = 3, edge.arrow.size = 0.2)
clp <- cluster_label_prop(newnetwork)
library(igraph)
install(igraph)
install igraph
install.packages("igraph")
library(readr)
library(tidyverse)
edge_data <- read_csv("edge_data.csv")
edgelist <- edge_data %>% select(Out_tie, In_tie, tie_type)
nodelist <- edge_data %>% select(Out_tie, introvert) %>% distinct()
library(igraph)
newnetwork <- graph_from_data_frame(d = edgelist,
vertices = nodelist,
directed = TRUE)
plot(newnetwork,
edge.arrow.size = 0.1,
vertex.size = 3,
vertex.label = NA)
V(newnetwork)$color <- V(newnetwork)$introvert
plot(newnetwork,
edge.arrow.size = 0.1,
vertex.size = 3,
vertex.label = NA)
edgelist1 <- edgelist %>% filter(tie_type == 3)
newnetwork1 <- graph_from_data_frame(d = edgelist1,
vertices = nodelist,
directed = TRUE)
plot(newnetwork1,
edge.arrow.size = 0.1,
vertex.size = 3,
vertex.label = NA)
# Let's do some descriptive stats
edge_density(newnetwork, loops=F)
# We can confirm that directly
ecount(newnetwork)/(vcount(newnetwork)*(vcount(newnetwork)-1))
reciprocity(newnetwork)
transitivity(newnetwork, type="global")
diameter(newnetwork, directed=F, weights=NA)
deg <- degree(newnetwork, mode="all")
mean(deg)
plot(newnetwork, vertex.size=deg/10, edge.arrow.size = 0.1)
hist(deg, breaks = 20, main="Histogram of node degree")
deg.dist <- degree_distribution(newnetwork, cumulative=T, mode="all")
plot( x=0:max(deg), y=1-deg.dist, pch=19, cex=1.2, col="orange", xlab="Degree", ylab="Cumulative Frequency")
degree(newnetwork, mode="in")
centr_degree(newnetwork, mode="in", normalized=T)
closeness(newnetwork, mode="all", weights=NA)
betweenness(newnetwork, directed=T, weights=NA)
mean_distance(newnetwork, directed=T)
distances(newnetwork, weights=NA)
ceb <- cluster_edge_betweenness(newnetwork)
dendPlot(ceb, mode="hclust")
plot(ceb, newnetwork, vertex.size = 3, edge.arrow.size = 0.2)
clp <- cluster_label_prop(newnetwork)
plot(clp, newnetwork, newnetwork, vertex.size = 3, edge.arrow.size = 0.2)
closeness(newnetwork, mode="all", weights=NA)
betweenness(newnetwork, directed=T, weights=NA)
ceb <- cluster_edge_betweenness(newnetwork)
plot(ceb, newnetwork, vertex.size = 3, edge.arrow.size = 0.2)
setwd("~/Desktop/School/Spring2022/BDS516/sem-22")
render_site()
